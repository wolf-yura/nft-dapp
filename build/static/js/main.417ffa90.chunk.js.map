{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleChange","event","setState","emojiUnicode","target","value","mint","String","fromCodePoint","state","contract","methods","send","from","account","once","receipt","emojis","e","alert","bind","totalSupply","a","this","loadWeb3","loadBlockchainData","document","body","style","backgroundColor","window","ethereum","web3","Web3","enable","currentProvider","webeProvider","givenProvider","eth","getAccounts","accounts","console","log","deployedNetwork","contractJson","networks","emojiContract","Contract","abi","address","call","i","emoji","placeholder","ListTemplate","classes","map","key","Card","className","root1","CardContent","Typography","gutterBottom","variant","component","Typo1","color","textAlign","href","rel","marginLeft","id","role","margin","type","name","onChange","marginTop","onClick","React","Component","withStyles","theme","maxWidth","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.417ffa90.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport contractJson from \"../src/build/contracts/Emoji.json\";\n\nimport { withStyles } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = (theme) => ({\n  root1: {\n    backgroundColor: \"#fff\",\n    maxWidth: 200,\n    marginTop: 20,\n    margin: \"0px auto\",\n  },\n  Typo1: {\n    color: \"#266AFB\",\n    fontWeight: \"bold\",\n    textAlign: \"left\",\n  },\n});\n\nclass App extends React.Component {\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n  componentDidMount() {\n    document.body.style.backgroundColor = \"#1b2336\";\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const webeProvider = new Web3(\n      Web3.givenProvider || \"http://localhost:7545\"\n    );\n    const accounts = await webeProvider.eth.getAccounts();\n\n    this.setState({ account: accounts[0] });\n    console.log(\"Account: \" + this.state.account);\n\n    //const netId = await web3.eth.net.getId();\n    const deployedNetwork = contractJson.networks[4];\n\n    if (deployedNetwork) {\n      const emojiContract = new web3.eth.Contract(\n        contractJson.abi,\n        deployedNetwork.address\n      );\n      this.setState({ contract: emojiContract });\n\n      const totalSupply = await emojiContract.methods.totalSupply().call();\n      this.setState({ totalSupply });\n      // Load Colors\n      for (var i = 1; i <= totalSupply; i++) {\n        const emoji = await emojiContract.methods.emojis(i - 1).call();\n        this.setState({\n          emojis: [...this.state.emojis, emoji],\n        });\n      }\n    } else {\n      window.alert(\"Smart contract not deployed to detected network.\");\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.mint = this.mint.bind(this);\n    this.state = {\n      emojiUnicode: \"1F44B\",\n      emojis: [],\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      emojiUnicode: event.target.value,\n    });\n  };\n\n  mint = () => {\n    try {\n      String.fromCodePoint(\"0x\" + this.state.emojiUnicode);\n      this.state.contract.methods\n        .mint(this.state.emojiUnicode)\n        .send({ from: this.state.account })\n        .once(\"receipt\", (receipt) => {\n          this.setState({\n            emojis: [...this.state.emojis, this.state.emojiUnicode],\n          });\n        });\n    } catch (e) {\n      alert(\"Enter Correct Code\");\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    let placeholder;\n    let ListTemplate;\n\n    try {\n      placeholder = String.fromCodePoint(\"0x\" + this.state.emojiUnicode);\n    } catch (e) {\n      alert(\"Enter Correct Code\");\n    }\n\n    ListTemplate = this.state.emojis.map((emoji, key) => (\n      <Card className={classes.root1}>\n        <CardContent>\n          <div key={key} className=\"col-md-3 mb-3\">\n            <div className=\"token\">{String.fromCodePoint(\"0x\" + emoji)}</div>\n          </div>\n          <Typography\n            gutterBottom\n            variant=\"h6\"\n            component=\"h5\"\n            className={classes.Typo1}\n          >\n            <h6 style={{ color: \"#0073f8\", textAlign: \"center\" }}>\n              Emoji Code: {\"0x\" + emoji}\n            </h6>\n          </Typography>\n        </CardContent>\n      </Card>\n    ));\n\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"#\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            style={{ marginLeft: \"5px\" }}\n          >\n            Emoji Tokens - NFT ( Non-Fungible Token )\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\">\n                <span id=\"account\">{this.state.account}</span>\n              </small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div\n                className=\"content mr-auto ml-auto\"\n                style={{ margin: \"0px auto\" }}\n              >\n                <h1 style={{ color: \"#fff\" }}>Issue Token</h1>\n                <input\n                  type=\"text\"\n                  name=\"emojiUnicode\"\n                  className=\"form-control mb-1\"\n                  placeholder=\"e.g. 2764\"\n                  onChange={this.handleChange}\n                />\n                <button\n                  style={{ marginTop: \"10px\" }}\n                  onClick={this.mint}\n                  type=\"submit\"\n                  className=\"btn btn-block btn-primary\"\n                >\n                  Mint\n                </button>\n              </div>\n            </main>\n          </div>\n          <div style={{ marginLeft: \"10px\", color: \"#fff\" }}>\n            Placeholder Emoji: {placeholder}{\" \"}\n          </div>\n          <hr style={{ color: \"#fff\" }} />\n          <div className=\"row\"></div>\n          <div className=\"row text-center\">{ListTemplate}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}